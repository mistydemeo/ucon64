.PHONY: all clean install

DLOPEN=1

libdir = ${exec_prefix}/lib
#INSTALL = @INSTALL@
#LIBTOOL = @LIBTOOL@
INSTALL = install -c
LIBTOOL = libtool

CC=gcc
CFLAGS=-I.. -I. -Wall -O3
ifdef DLOPEN
CFLAGS+=-DDLOPEN
endif
LDFLAGS=-s

LIBNAME=discmage
OBJECTS=libdiscmage.o cdi.o nero.o sheets.o dllinit.o misc.o


# The test for Cygwin should be done before the test for DJGPP, because the
# environment variable DJGPP can be set under Bash for people who have
# installed both gcc (and friends) ports.

ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP

GCCA_DIR=/lib/gcc-lib/i686-pc-cygwin/2.95.3-5/
LIBS=-lcygwin -lkernel32 -L$(GCCA_DIR) -lgcc
# kernel32 for DLOPEN and DisableThreadLibraryCalls()
#ZLIB=1
ifdef ZLIB
LIBS+=-lz
OBJECTS+=unzip.o
endif

ifdef DLOPEN
ENTRY=__cygwin_dll_entry@12
else
ENTRY=_DllMain@12
endif

FULLLIBNAME=$(LIBNAME).dll
DLLFLAGS=$(LDFLAGS) --dll -o $(LIBNAME).dll $(OBJECTS) $(LIBS) -e $(ENTRY)
DLLTOOLFLAGS=--dllname $(LIBNAME).dll --def tmp.def

else
ifdef DJGPP

CFLAGS+=-DDXE
GCCA_DIR=c:/djgpp/lib/gcc-lib/djgpp/2.81
DLLFLAGS=-L$(GCCA_DIR) -lgcc
FULLLIBNAME=$(LIBNAME).dxe

else                                    # Unix or BeOS

CFLAGS+=-fPIC
ifdef DLOPEN
FULLLIBNAME=$(LIBNAME).so
else
FULLLIBNAME=lib$(LIBNAME).so
endif

ifeq ($(OSTYPE),beos)
DLLFLAGS=$(LDFLAGS) -nostart
else
DLLFLAGS=$(LDFLAGS) -shared
endif
DLLFLAGS+=-o $(FULLLIBNAME) $(OBJECTS)

endif                                   # DJGPP
endif                                   # cygwin


all: $(FULLLIBNAME)


clean:
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
	rm -f $(LIBNAME).dll $(LIBNAME).a $(OBJECTS) *.core *.stackdump *.o \
              tmp.def tmp.base tmp.exp
else
ifdef DJGPP
	del $(LIBNAME).dxe
ifndef DLOPEN
	del $(LIBNAME).a
endif
	del *.o
else                                    # Unix or BeOS
	rm -f *.so $(OBJECTS) *.core *.stackdump *.o
endif                                   # DJGPP
endif                                   # cygwin


distclean: clean
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
	rm -f Makefile config.log config.status config.cache config.h
else
ifdef DJGPP
	del Makefile
	del config.log
	del config.status
	del config.cache
	del config.h
else
	rm -f Makefile config.log config.status config.cache config.h
endif                                   # DJGPP
endif                                   # cygwin


.c.o:
	$(CC) $(CFLAGS) -c $< -o $@


ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP

ifndef DLOPEN
$(LIBNAME).dll $(LIBNAME).a: $(OBJECTS)
else
$(LIBNAME).dll: $(OBJECTS)
endif
	echo EXPORTS > tmp.def
#	nm $(OBJECTS) | grep ' T _' | sed 's/.* T _//' >> tmp.def
	nm $(OBJECTS) | grep '^........ [T] _' | sed 's/[^_]*_//' >> tmp.def

	@echo "NOTE: If you get an error about -lgcc or errors about undefined"
	@echo "      symbols, read faq.html question 2"
	ld --base-file tmp.base $(DLLFLAGS)
	dlltool $(DLLTOOLFLAGS) --base-file tmp.base --output-exp tmp.exp

	ld --base-file tmp.base tmp.exp $(DLLFLAGS)
#	dlltool $(DLLTOOLFLAGS) --base-file tmp.base

#	ld tmp.exp $(DLLFLAGS)
ifndef DLOPEN
	dlltool $(DLLTOOLFLAGS) --output-lib $(LIBNAME).a
endif

else
ifdef DJGPP

ifndef DLOPEN
$(LIBNAME).dxe $(LIBNAME).a: $(OBJECTS) djimport.o dlopen.o
else
$(LIBNAME).dxe: $(OBJECTS)
endif
	@echo "NOTE: If you get an error about -lgcc or errors about undefined"
	@echo "      symbols, read faq.html question 2"
	dxegen $(LIBNAME).dxe _import_export $(OBJECTS) $(DLLFLAGS)
ifndef DLOPEN
	ar rs $(LIBNAME).a djimport.o dlopen.o
endif

else                                    # Unix or BeOS
# Unix uses LD_LIBRARY_PATH for dynamic linking, BeOS uses LIBRARY_PATH

$(FULLLIBNAME): $(OBJECTS)
	$(CC) $(DLLFLAGS)

endif                                   # DJGPP
endif                                   # cygwin


#ifndef DLOPEN
#install:
#	$(LIBTOOL) --mode=install $(INSTALL) $(FULLLIBNAME) $(libdir)/$(FULLLIBNAME)
#endif

# Dependencies
libdiscmage/libdiscmage.o: libdiscmage/libdiscmage.h \
                           libdiscmage/libdiscmage_cfg.h \
                           libdiscmage/dxedll_priv.h
libdiscmage/nero.o: libdiscmage/libdiscmage.h libdiscmage/nero.h \
                    libdiscmage/cdi.h config.h libdiscmage/dxedll_priv.h
libdiscmage/cdi.o: libdiscmage/libdiscmage.h libdiscmage/cdi.h \
                   libdiscmage/dxedll_priv.h
libdiscmage/sheets.o: libdiscmage/libdiscmage.h libdiscmage/dxedll_priv.h
libdiscmage/dllinit.o: libdiscmage/libdiscmage.h libdiscmage/dxedll_priv.h
libdiscmage/misc.o: libdiscmage/dxedll_priv.h
