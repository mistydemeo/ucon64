.PHONY: all clean distclean install uninstall

CC=gcc

CFLAGS=-I. -Wall -O3
LDFLAGS=-s
#LDFLAGS+=-lz

OBJECTS=ucon64.o ucon64_misc.o ucon64_db.o misc.o getopt.o quick_io.o \
        patch/aps.o patch/bsl.o patch/ips.o patch/gg.o patch/pal4u.o \
        patch/ppf.o patch/xps.o \
        console/gb.o console/gba.o console/genesis.o console/lynx.o \
        console/n64.o console/neogeo.o console/nes.o console/ngp.o \
        console/pce.o console/sms.o console/psx.o console/snes.o \
        console/swan.o console/dc.o console/jaguar.o console/sample.o \
        backup/yoko.o backup/ssc.o backup/interceptor.o backup/cdrw.o \
        backup/z64.o backup/cd64.o backup/doctor64.o backup/doctor64jr.o \
        backup/fal.o backup/fig.o backup/fpl.o backup/gbx.o backup/mgd.o \
        backup/smc.o backup/smd.o backup/swc.o backup/dex.o backup/psxpblib.o \
        backup/mccl.o backup/lynxit.o


TARGET=ucon64
ifeq ($(TERM),cygwin)                   # OSTYPE is not a real env var on Cygwin
TARGET:=$(addsuffix .exe, $(TARGET))    # GNU specific: "simply expanded variable"
else                                    # adding .exe avoids "problems" with Cygwin
ifdef DJGPP                             # OSTYPE is not defined by default under DOS
TARGET:=$(addsuffix .exe, $(TARGET))
endif                                   # DJGPP
endif                                   # cygwin

all: $(TARGET)

# The test for Cygwin should be done before the test for DJGPP, because the
# environment variable DJGPP can be set under Bash for people who have
# installed both gcc (and friends) ports.

clean:
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
	rm -f $(TARGET) $(OBJECTS) *.core *.stackdump *~ */*~ */*/*~ \
              DEADJOE */DEADJOE *~ */*~ */*/*~
else
ifdef DJGPP
	del *.o
	del patch\*.o
	del console\*.o
	del backup\*.o
	del $(TARGET)
else                                    # Unix or BeOS
	rm -f $(TARGET) $(OBJECTS) *.core *.stackdump *~ */*~ */*/*~ \
              DEADJOE */DEADJOE *~ */*~ */*/*~

endif                                   # DJGPP
endif                                   # cygwin

distclean: clean
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
	rm -f Makefile config.log config.status config.cache config.h
else
ifdef DJGPP
	del Makefile
	del config.log
	del config.status
	del config.cache
	del config.h
else
	rm -f Makefile config.log config.status config.cache config.h
endif                                   # DJGPP
endif                                   # cygwin


.c.o:
	$(CC) $(CFLAGS) -c $< -o $@


$(TARGET): $(OBJECTS)
	$(CC) -o $@ $(OBJECTS) $(LDFLAGS)

install:
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
else
ifdef DJGPP
else
ifeq ($(OSTYPE),beos)
	./install_beos.sh
else
	./install.sh
endif                                   # beos
endif                                   # DJGPP
endif                                   # cygwin


uninstall:
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
else
ifdef DJGPP
else
ifeq ($(OSTYPE),beos)
	rm -f $(HOME)/config/bin/$(TARGET)
else
	rm -f /usr/local/bin/$(TARGET)
endif                                   # beos
endif                                   # DJGPP
endif                                   # cygwin


# Dependencies

# Most source files include these
UCON64_STD_H=ucon64.h ucon64_misc.h misc.h config.h ucon64_defines.h quick_io.h

getopt.o: getopt.h
misc.o: misc.h config.h
quick_io.o: misc.h
ucon64.o: switches.c options.c $(UCON64_STD_H)
ucon64_misc.o: $(UCON64_STD_H)
ucon64_db.o: ucon64_db.h $(UCON64_STD_H)
console/gb.o: console/gb.h $(UCON64_STD_H)
console/gba.o: console/gba.h $(UCON64_STD_H)
console/genesis.o: console/genesis.h $(UCON64_STD_H)
console/jaguar.o: console/jaguar.h $(UCON64_STD_H)
console/lynx.o: console/lynx.h $(UCON64_STD_H)
console/n64.o: console/n64.h $(UCON64_STD_H)
console/neogeo.o: console/neogeo.h $(UCON64_STD_H)
console/nes.o: console/nes.h $(UCON64_STD_H)
console/ngp.o: console/ngp.h $(UCON64_STD_H)
console/pce.o: console/pce.h $(UCON64_STD_H)
console/sms.o: console/sms.h $(UCON64_STD_H)
console/snes.o: console/snes.h $(UCON64_STD_H)
console/swan.o: console/swan.h $(UCON64_STD_H)
console/dc.o: console/dc.h $(UCON64_STD_H)
console/psx.o: console/psx.h $(UCON64_STD_H)
patch/aps.o: patch/aps.h $(UCON64_STD_H)
patch/bsl.o: patch/bsl.h $(UCON64_STD_H)
patch/ips.o: patch/ips.h $(UCON64_STD_H)
patch/ppf.o: patch/ppf.h $(UCON64_STD_H)
patch/xps.o: patch/xps.h $(UCON64_STD_H)
patch/pal4u.o: patch/pal4u.h $(UCON64_STD_H)
patch/gg.o: patch/gg.h $(UCON64_STD_H)
backup/doctor64.o: backup/doctor64.h $(UCON64_STD_H)
backup/doctor64jr.o: backup/doctor64jr.h $(UCON64_STD_H)
backup/fal.o: backup/fal.h backup/cartlib.c $(UCON64_STD_H)
backup/fig.o: backup/fig.h $(UCON64_STD_H)
backup/fpl.o: backup/fpl.h $(UCON64_STD_H)
backup/gbx.o: backup/gbx.h $(UCON64_STD_H)
backup/mgd.o: backup/mgd.h $(UCON64_STD_H)
backup/smc.o: backup/smc.h $(UCON64_STD_H)
backup/smd.o: backup/smd.h $(UCON64_STD_H)
backup/swc.o: backup/swc.h $(UCON64_STD_H)
backup/cd64.o: backup/cd64.h $(UCON64_STD_H)
backup/cdrw.o: backup/cdrw.h $(UCON64_STD_H)
backup/dex.o: backup/dex.h backup/psxpblib.h $(UCON64_STD_H)
backup/mccl.o: backup/mccl.h $(UCON64_STD_H)
backup/lynxit.o: backup/lynxit.h $(UCON64_STD_H)
