.PHONY: all clean install

DLOPEN=1

libdir = @libdir@
#INSTALL = @INSTALL@
#LIBTOOL = @LIBTOOL@
INSTALL = install -c
LIBTOOL = libtool

CC=gcc
CFLAGS=-I.. -I. -Wall -O3
ifdef   DLOPEN
CFLAGS+=-DDLOPEN
endif
LDFLAGS=-s
# -rdynamic is not necessary under GNU/Linux, but see info page of dlopen().

LIBNAME=discmage
OBJECTS=libdiscmage.o cdi.o nero.o sheets.o dllinit.o


# The test for Cygwin should be done before the test for DJGPP, because the
# environment variable DJGPP can be set under Bash for people who have
# installed both gcc (and friends) ports.

ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
LIBS=-lcygwin -lkernel32
# kernel32 for DLOPEN and DisableThreadLibraryCalls()

ifdef   DLOPEN
ENTRY=__cygwin_dll_entry@12
else
ENTRY=_DllMain@12
endif

LIBSUFFIX=.dll
DLLFLAGS=$(LDFLAGS) --dll -o $(LIBNAME).dll $(OBJECTS) $(LIBS) -e $(ENTRY)
DLLTOOLFLAGS=--dllname $(LIBNAME).dll --def tmp.def

else
ifdef DJGPP
LIBSUFFIX=.dxe
else                                    # Unix or BeOS
LIBSUFFIX=.so
CFLAGS+=-fPIC

ifeq ($(TERM),be)                       # BeOS (untested!)
DLLFLAGS=-nostart
else                                    # Unix
DLLFLAGS=-shared
ifdef   DLOPEN
LIBS=-ldl
else
# for DLL clients:
#LDFLAGS+=-L.
#LIBS=-l$(LIBNAME)
endif

endif                                   # DJGPP
endif                                   # cygwin


ifndef  DLOPEN
all: lib$(LIBNAME)$(LIBSUFFIX)
else
all: $(LIBNAME)$(LIBSUFFIX)
endif


clean:
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
	rm -f $(LIBNAME).dll $(LIBNAME).a $(OBJECTS) *.core *.stackdump *.o
else
ifdef DJGPP
	del $(LIBNAME).dxe
ifndef  DLOPEN
	del $(LIBNAME).a
endif
	del *.o
else                                    # Unix or BeOS
	rm -f *$(LIBSUFFIX) $(OBJECTS) *.core *.stackdump *.o
endif
endif                                   # DJGPP
endif                                   # cygwin


.c.o:
	$(CC) $(CFLAGS) -c $< -o $@


ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP

ifndef  DLOPEN
$(LIBNAME).dll $(LIBNAME).a: $(OBJECTS)
else
$(LIBNAME).dll: $(OBJECTS)
endif
	echo EXPORTS > tmp.def
#	nm $(OBJECTS) | grep ' T _' | sed 's/.* T _//' >> tmp.def
	nm $(OBJECTS) | grep '^........ [T] _' | sed 's/[^_]*_//' >> tmp.def

	ld --base-file tmp.base $(DLLFLAGS)
	dlltool $(DLLTOOLFLAGS) --base-file tmp.base --output-exp tmp.exp

	ld --base-file tmp.base tmp.exp $(DLLFLAGS)
	dlltool $(DLLTOOLFLAGS) --base-file tmp.base

	ld tmp.exp $(DLLFLAGS)
ifndef  DLOPEN
	dlltool $(DLLTOOLFLAGS) --output-lib $(LIBNAME).a
endif

else
ifdef DJGPP

ifndef  DLOPEN
# TODO: write an import library for DJGPP
$(LIBNAME).dxe $(LIBNAME).a: $(OBJECTS) dlopen.o
else
$(LIBNAME).dxe: $(OBJECTS)
endif
	dxegen $(LIBNAME).dxe _import_export $(OBJECTS)
ifndef  DLOPEN
# TODO: write an import library for DJGPP
	ar rs $(LIBNAME).a dlopen.o
endif

else                                    # Unix or BeOS
# Unix uses LD_LIBRARY_PATH for dynamic linking, BeOS LIBRARY_PATH

ifndef  DLOPEN
lib$(LIBNAME).so: $(OBJECTS)
	$(CC) $(DLLFLAGS) $(OBJECTS) -o lib$(LIBNAME).so
else
$(LIBNAME).so: $(OBJECTS)
	$(CC) $(DLLFLAGS) $(OBJECTS) -o $(LIBNAME).so
endif

endif                                   # DJGPP
endif                                   # cygwin


ifndef  DLOPEN
install:
	$(LIBTOOL) --mode=install $(INSTALL) lib$(LIBNAME).so $(libdir)/lib$(LIBNAME).so
endif

# Dependencies
libdiscmage/libdiscmage.o: libdiscmage/libdiscmage_cfg.h libdiscmage/dxedll_priv.h
libdiscmage/nero.o: libdiscmage/nero.h libdiscmage/cdi.h config.h libdiscmage/dxedll_priv.h
libdiscmage/cdi.o: libdiscmage/cdi.h libdiscmage/dxedll_priv.h
