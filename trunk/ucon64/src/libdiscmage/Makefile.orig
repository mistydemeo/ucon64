.PHONY: all clean install

DLOPEN=1
#ZLIB=1

libdir = ${exec_prefix}/lib
#INSTALL = @INSTALL@
#LIBTOOL = @LIBTOOL@
INSTALL = install -c
LIBTOOL = libtool

CC=gcc
CFLAGS0=-Wall -W -O3 -DHAVE_CONFIG_H
CFLAGS=$(CFLAGS0) -DDLL
ifdef DLOPEN
CFLAGS+=-DDLOPEN
endif
LDFLAGS=-s
# On Mac OS X using -s gives the following warning:
# /usr/bin/libtool: -static not specified, -s invalid

# The test for Cygwin should be done before the test for DJGPP, because the
# environment variable DJGPP can be set under Bash for people who have
# installed both gcc (and friends) ports.

GCC_WIN=0
ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP
GCC_WIN=1
endif
ifeq ($(OSTYPE),msys)                   # test msys (MinGW's POSIX build env.) before DJGPP
GCC_WIN=1
endif

LIBNAME=discmage
OBJECTS=libdm_misc.o cdi.o nero.o sheets.o other.o dllinit.o misc.o
ifdef ZLIB
LIBS=-lz
OBJECTS+=unzip.o map.o miscz.o
else
LIBS=
ifeq ($(GCC_WIN),1)
else
ifdef DJGPP                             # DJGPP code in dllinit needs map code
OBJECTS+=map.o
endif                                   # DJGPP
endif                                   # GCC_WIN
endif                                   # ZLIB


ifeq ($(TERM),cygwin)                   # test cygwin before DJGPP

GCCA_DIR=/lib/gcc-lib/i686-pc-cygwin/3.2/
ifeq ($(CC),g++)
# talk about unnecessary dependencies...
LIBS+=-lstdc++ -lc -lpthread
endif
LIBS+=-L$(GCCA_DIR) -lgcc -lcygwin -lkernel32
# kernel32 for DLOPEN and DisableThreadLibraryCalls()

ifdef DLOPEN
ENTRY=__cygwin_dll_entry@12
else
ENTRY=_DllMain@12
endif

FULLLIBNAME=$(LIBNAME).dll
DLLFLAGS=$(LDFLAGS) --dll $(OBJECTS) $(LIBS) -e $(ENTRY) -o $(LIBNAME).dll
DLLTOOLFLAGS=-d tmp.def -b tmp.base -e tmp.exp -D $(LIBNAME).dll
ifndef DLOPEN
DLLTOOLFLAGS+=-l $(LIBNAME).a
endif

else
ifeq ($(OSTYPE),msys)                   # test msys before DJGPP

GCCA_DIR=/mingw/lib/gcc-lib/mingw32/3.2.3/
LIBS+=-L/mingw/lib -lkernel32 -lmsvcrt -L$(GCCA_DIR) -lgcc
# Msys problem: Specifying the library directory is necessary when compiling on
# a different filesystem than the filesystem that MinGW is installed on.

FULLLIBNAME=$(LIBNAME).dll
DLLFLAGS=$(LDFLAGS) --dll $(OBJECTS) $(LIBS) -e _DllMain@12 -o $(LIBNAME).dll
DLLTOOLFLAGS=-d tmp.def -b tmp.base -e tmp.exp -D $(LIBNAME).dll
ifndef DLOPEN
DLLTOOLFLAGS+=-l $(LIBNAME).a
endif

else
ifdef DJGPP

OBJECTS+=dxe_misc.o
# This file is only really necessary when zlib support is/should be enabled,
# but it's wise to have as little conditionally compiled code as possible.
# Besides it currently gets used even if zlib support is disabled.

GCCA_DIR=c:/djgpp/lib/gcc-lib/djgpp/3.31
LIBS+=-L$(GCCA_DIR) -lgcc

DLLFLAGS=$(OBJECTS) $(LIBS) $(LDFLAGS)
# $(LDFLAGS) must come after $(OBJECTS)
FULLLIBNAME=$(LIBNAME).dxe

else                                    # Unix, BeOS or Mac OS X (Darwin)

CFLAGS+=-fPIC

ifeq ($(findstring darwin,$(OSTYPE)),darwin) # for example "darwin7.0"
FULLLIBNAME=$(LIBNAME).dylib
else
FULLLIBNAME=$(LIBNAME).so
endif

ifndef DLOPEN                           # GNU specific: "simply expanded variable"
FULLLIBNAME:=$(addprefix lib,$(FULLLIBNAME))
endif

ifeq ($(OSTYPE),beos)
LDFLAGS+=-nostart
else
ifeq ($(findstring darwin,$(OSTYPE)),darwin)
LDFLAGS+=-dynamiclib
else
LDFLAGS+=-shared
endif                                   # darwin
endif                                   # beos

DLLFLAGS+=$(LDFLAGS) $(OBJECTS) $(LIBS) -o $(FULLLIBNAME)

endif                                   # DJGPP
endif                                   # msys
endif                                   # cygwin


all: $(FULLLIBNAME)


clean:
ifeq ($(GCC_WIN),1)
	rm -f $(FULLLIBNAME) $(LIBNAME).a $(OBJECTS) *.core *.stackdump *.o \
              tmp.def tmp.base tmp.exp
else
ifdef DJGPP
	del $(FULLLIBNAME)
ifndef DLOPEN
	del $(LIBNAME).a
endif
	del *.o
else                                    # Unix, BeOS or Mac OS X (Darwin)
	rm -f $(FULLLIBNAME) $(OBJECTS) *.core *.stackdump *.o
endif                                   # DJGPP
endif                                   # GCC_WIN


distclean: clean
ifeq ($(GCC_WIN),1)
	rm -f Makefile config.log config.status config.cache config.h
else
ifdef DJGPP
	del Makefile
	del config.log
	del config.status
	del config.cache
	del config.h
else
	rm -f Makefile config.log config.status config.cache config.h
endif                                   # DJGPP
endif                                   # GCC_WIN


.c.o:
	$(CC) $(CFLAGS) -c $< -o $@


ifeq ($(GCC_WIN),1)

ifndef DLOPEN
$(LIBNAME).dll $(LIBNAME).a: $(OBJECTS)
else
$(LIBNAME).dll: $(OBJECTS)
endif
	echo EXPORTS > tmp.def
#	nm $(OBJECTS) | grep ' T _' | sed 's/.* T _//' >> tmp.def
	nm $(OBJECTS) | grep '^........ [T] _' | sed 's/[^_]*_//' >> tmp.def
# We use nm instead of dlltool --output-def, so that we don't have to
# specify explicitly (in the source code) which symbols should be exported

	@echo "NOTE: If you get an error about -lgcc or errors about undefined"
	@echo "      symbols, read faq.html question 3"
	ld --base-file tmp.base $(DLLFLAGS)
	dlltool $(DLLTOOLFLAGS)
	ld tmp.exp $(DLLFLAGS)

else
ifdef DJGPP

ifndef DLOPEN
$(LIBNAME).dxe $(LIBNAME).a: $(OBJECTS) djimport.o dlopen.o
else
$(LIBNAME).dxe: $(OBJECTS)
endif
	@echo "NOTE: If you get an error about -lgcc or errors about undefined"
	@echo "      symbols, read faq.html question 3"
	dxegen $(LIBNAME).dxe _import_export $(DLLFLAGS)
ifndef DLOPEN
# Recompile map.c, because it has to be a normal object file for the import
# library (no references to import_export)
	$(CC) $(CFLAGS0) -c map.c -o map.o
	ar rs $(LIBNAME).a djimport.o map.o dlopen.o
endif

else                                    # Unix, BeOS or Mac OS X (Darwin)
# Unix uses LD_LIBRARY_PATH for dynamic linking, BeOS uses LIBRARY_PATH, Darwin
# uses LD_LIBRARY_PATH, DYLD_LIBRARY_PATH and DYLD_FALLBACK_LIBRARY_PATH

$(FULLLIBNAME): $(OBJECTS)
	$(CC) $(DLLFLAGS)

endif                                   # DJGPP
endif                                   # GCC_WIN


#ifndef DLOPEN
#install:
#	$(LIBTOOL) --mode=install $(INSTALL) $(FULLLIBNAME) $(libdir)/$(FULLLIBNAME)
#endif

# Dependencies

libdm_misc.o: libdiscmage.h misc.h dxedll_priv.h
cdi.o: libdiscmage.h misc.h cdi.h dxedll_priv.h
nero.o: libdiscmage.h misc.h nero.h dxedll_priv.h
sheets.o: libdiscmage.h misc.h sheets.h dxedll_priv.h
other.o: libdiscmage.h misc.h other.h dxedll_priv.h
dllinit.o: libdiscmage.h misc.h dxedll_priv.h
misc.o: misc.h dxedll_priv.h
miscz.o: miscz.h misc.h dxedll_priv.h
dxe_misc.o: dxedll_pub.h
djimport.o: libdiscmage.h dlopen.h dxedll_pub.h
dlopen.o: dlopen.h dxedll_pub.h
